{"version":3,"sources":["scripts/main.js"],"names":["button","document","querySelector","gameMessageWin","gameMessageLose","gameMessageStart","gameScore","cells","querySelectorAll","fieldSize","winValue","score","field","Array","from","length","fill","initializeGame","textContent","classList","add","remove","clearField","allCells","forEach","row","rowIndex","value","colIndex","push","col","cell","generateCell","availableCells","Math","floor","random","updateField","className","moveCells","direction","moved","rotateField","map","i","reverse","moveRowOrColumn","arr","nonZero","filter","result","newValue","newRow","arraysEqual","flat","includes","canMove","j","arr1","arr2","addEventListener","eventButton","preventDefault","contains","key"],"mappings":";AAAA,aAEA,IAAMA,EAASC,SAASC,cAAc,WAChCC,EAAiBF,SAASC,cAAc,gBACxCE,EAAkBH,SAASC,cAAc,iBACzCG,EAAmBJ,SAASC,cAAc,kBAC1CI,EAAYL,SAASC,cAAc,eACnCK,EAAQN,SAASO,iBAAiB,eAClCC,EAAY,EACZC,EAAW,KACbC,EAAQ,EACRC,EAAQC,MAAMC,KAAK,CAAEC,OAAQN,GAAa,WAAMI,OAAAA,MAAMJ,GAAWO,KAAK,KAG1E,SAASC,IACPN,EAAQ,EACRL,EAAUY,YAAcP,EACxBR,EAAegB,UAAUC,IAAI,UAC7BhB,EAAgBe,UAAUC,IAAI,UAC9Bf,EAAiBc,UAAUE,OAAO,UAClCC,IAIF,SAASA,IACDC,IAAAA,EAAW,GAEjBX,EAAMY,QAAQ,SAACC,EAAKC,GAClBD,EAAID,QAAQ,SAACG,EAAOC,GAClBL,EAASM,KAAK,CACZJ,IAAKC,EAAUI,IAAKF,QAK1BL,EAASC,QAAQ,SAACO,GACRN,IAAAA,EAAaM,EAAbN,IAAKK,EAAQC,EAARD,IAEblB,EAAMa,GAAKK,GAAO,IAKtB,SAASE,IACDC,IAAAA,EAAiB,GAYnBA,GAVJrB,EAAMY,QAAQ,SAACC,EAAKC,GAClBD,EAAID,QAAQ,SAACG,EAAOC,GACJ,IAAVD,GACFM,EAAeJ,KAAK,CAClBJ,IAAKC,EAAUI,IAAKF,QAMxBK,EAAelB,OAAS,EAAG,CAEzBkB,IAAAA,EAAAA,EAAeC,KAAKC,MAAMD,KAAKE,SAAWH,EAAelB,SADrDU,EAAAA,EAAAA,IAAKK,EAAAA,EAAAA,IAGblB,EAAMa,GAAKK,GAAOI,KAAKE,SAAW,GAAM,EAAI,EAC5CC,KAKJ,SAASA,IACPzB,EAAMY,QAAQ,SAACC,EAAKC,GAClBD,EAAID,QAAQ,SAACG,EAAOC,GACZG,IAAAA,EAAOxB,EAAMmB,EAAWjB,EAAYmB,GAE1CG,EAAKb,YAAcS,EAAQ,EAAIA,EAAQ,GACvCI,EAAKO,UAAsCX,0BAAAA,OAAAA,OAMjD,SAASY,EAAUC,GACbC,IAAAA,GAAQ,EAEHC,SAAAA,IACP9B,EAAQA,EAAM,GAAG+B,IAAI,SAACb,EAAKc,GAAMhC,OAAAA,EAAM+B,IAAI,SAAAlB,GAAOA,OAAAA,EAAImB,OAAKC,UAGpDC,SAAAA,EAAgBC,GAIlB,IAHCC,IAAAA,EAAUD,EAAIE,OAAO,SAACtB,GAAUA,OAAU,IAAVA,IAChCuB,EAAS,GAENN,EAAI,EAAGA,EAAII,EAAQjC,OAAQ6B,IAC9BA,GAAAA,EAAII,EAAQjC,OAAS,GAAKiC,EAAQJ,KAAOI,EAAQJ,EAAI,GAAI,CACrDO,IAAAA,EAAwB,EAAbH,EAAQJ,GAEzBM,EAAOrB,KAAKsB,GACZxC,GAASwC,EACTP,SAEAM,EAAOrB,KAAKmB,EAAQJ,IAIjBM,KAAAA,EAAOnC,OAASgC,EAAIhC,QACzBmC,EAAOrB,KAAK,GAGPqB,OAAAA,EAGDV,OAAAA,GACD,IAAA,KACHE,IAEK,IAAA,IAAIE,EAAI,EAAGA,EAAInC,EAAWmC,IAAK,CAC5BQ,IAAAA,EAASN,EAAgBlC,EAAMgC,IAEhCH,GAAUY,EAAYD,EAAQxC,EAAMgC,MACvCH,GAAQ,GAEV7B,EAAMgC,GAAKQ,EAEbV,IACAA,IACAA,IACA,MAEG,IAAA,OACHA,IACAA,IACAA,IAEK,IAAA,IAAIE,EAAI,EAAGA,EAAInC,EAAWmC,IAAK,CAC5BQ,IAAAA,EAASN,EAAgBlC,EAAMgC,IAEhCH,GAAUY,EAAYD,EAAQxC,EAAMgC,MACvCH,GAAQ,GAEV7B,EAAMgC,GAAKQ,EAEbV,IACA,MAEG,IAAA,OACE,IAAA,IAAIE,EAAI,EAAGA,EAAInC,EAAWmC,IAAK,CAC5BQ,IAAAA,EAASN,EAAgBlC,EAAMgC,IAEhCH,GAAUY,EAAYD,EAAQxC,EAAMgC,MACvCH,GAAQ,GAEV7B,EAAMgC,GAAKQ,EAEb,MAEG,IAAA,QACHV,IACAA,IAEK,IAAA,IAAIE,EAAI,EAAGA,EAAInC,EAAWmC,IAAK,CAC5BQ,IAAAA,EAASN,EAAgBlC,EAAMgC,IAEhCH,GAAUY,EAAYD,EAAQxC,EAAMgC,MACvCH,GAAQ,GAEV7B,EAAMgC,GAAKQ,EAEbV,IACAA,IAIAD,IACFJ,IACA/B,EAAUY,YAAcP,EACxBqB,IAEIpB,EAAM0C,OAAOC,SAAS7C,IACxBP,EAAegB,UAAUE,OAAO,UAG7BmC,KACHpD,EAAgBe,UAAUE,OAAO,WAMvC,SAASmC,IACF,IAAA,IAAIZ,EAAI,EAAGA,EAAInC,EAAWmC,IACxB,IAAA,IAAIa,EAAI,EAAGA,EAAIhD,EAAWgD,IAAK,CAC9B7C,GAAgB,IAAhBA,EAAMgC,GAAGa,GACJ,OAAA,EAGLA,GAAAA,EAAIhD,EAAY,GAAKG,EAAMgC,GAAGa,KAAO7C,EAAMgC,GAAGa,EAAI,GAC7C,OAAA,EAGLb,GAAAA,EAAInC,EAAY,GAAKG,EAAMgC,GAAGa,KAAO7C,EAAMgC,EAAI,GAAGa,GAC7C,OAAA,EAKN,OAAA,EAIT,SAASJ,EAAYK,EAAMC,GACrBD,GAAAA,EAAK3C,SAAW4C,EAAK5C,OAChB,OAAA,EAGJ,IAAA,IAAI6B,EAAI,EAAGA,EAAIc,EAAK3C,OAAQ6B,IAC3Bc,GAAAA,EAAKd,KAAOe,EAAKf,GACZ,OAAA,EAIJ,OAAA,EAIT3C,SAAS2D,iBAAiB,UAAW,SAAAC,GAG/BxD,GAFJwD,EAAYC,iBAERzD,EAAiBc,UAAU4C,SAAS,UAC9BF,OAAAA,EAAYG,KACb,IAAA,UACHzB,EAAU,MACV,MACG,IAAA,YACHA,EAAU,QACV,MACG,IAAA,YACHA,EAAU,QACV,MACG,IAAA,aACHA,EAAU,YAOlBvC,EAAO4D,iBAAiB,QAAS,WAC/B3C,IACAjB,EAAOmB,UAAUE,OAAO,SACxBrB,EAAOmB,UAAUC,IAAI,WACrBpB,EAAOkB,YAAc,UACrBb,EAAiBc,UAAUC,IAAI,UAC/BY,IACAA,MAIFf","file":"main.25d587da.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('.button');\nconst gameMessageWin = document.querySelector('.message-win');\nconst gameMessageLose = document.querySelector('.message-lose');\nconst gameMessageStart = document.querySelector('.message-start');\nconst gameScore = document.querySelector('.game-score');\nconst cells = document.querySelectorAll('.field-cell');\nconst fieldSize = 4;\nconst winValue = 2048;\nlet score = 0;\nlet field = Array.from({ length: fieldSize }, () => Array(fieldSize).fill(0));\n\n// Функція для ініціалізації гри.\nfunction initializeGame() {\n  score = 0;\n  gameScore.textContent = score;\n  gameMessageWin.classList.add('hidden');\n  gameMessageLose.classList.add('hidden');\n  gameMessageStart.classList.remove('hidden');\n  clearField();\n}\n\n// Функція для очищення поля гри.\nfunction clearField() {\n  const allCells = [];\n\n  field.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      allCells.push({\n        row: rowIndex, col: colIndex,\n      });\n    });\n  });\n\n  allCells.forEach((cell) => {\n    const { row, col } = cell;\n\n    field[row][col] = 0;\n  });\n}\n\n// Функція для генерації нової клітинки.\nfunction generateCell() {\n  const availableCells = [];\n\n  field.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      if (value === 0) {\n        availableCells.push({\n          row: rowIndex, col: colIndex,\n        });\n      }\n    });\n  });\n\n  if (availableCells.length > 0) {\n    const { row, col }\n      = availableCells[Math.floor(Math.random() * availableCells.length)];\n\n    field[row][col] = Math.random() < 0.9 ? 2 : 4;\n    updateField();\n  }\n}\n\n// Функція для оновлення відображення поля гри.\nfunction updateField() {\n  field.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      const cell = cells[rowIndex * fieldSize + colIndex];\n\n      cell.textContent = value > 0 ? value : '';\n      cell.className = `field-cell field-cell--${value}`;\n    });\n  });\n}\n\n// Функція для руху клітинок у вказаному напрямку.\nfunction moveCells(direction) {\n  let moved = false;\n\n  function rotateField() {\n    field = field[0].map((col, i) => field.map(row => row[i])).reverse();\n  }\n\n  function moveRowOrColumn(arr) {\n    const nonZero = arr.filter((value) => value !== 0);\n    const result = [];\n\n    for (let i = 0; i < nonZero.length; i++) {\n      if (i < nonZero.length - 1 && nonZero[i] === nonZero[i + 1]) {\n        const newValue = nonZero[i] * 2;\n\n        result.push(newValue);\n        score += newValue;\n        i++;\n      } else {\n        result.push(nonZero[i]);\n      }\n    }\n\n    while (result.length < arr.length) {\n      result.push(0);\n    }\n\n    return result;\n  }\n\n  switch (direction) {\n    case 'up':\n      rotateField();\n\n      for (let i = 0; i < fieldSize; i++) {\n        const newRow = moveRowOrColumn(field[i]);\n\n        if (!moved && !arraysEqual(newRow, field[i])) {\n          moved = true;\n        }\n        field[i] = newRow;\n      }\n      rotateField();\n      rotateField();\n      rotateField();\n      break;\n\n    case 'down':\n      rotateField();\n      rotateField();\n      rotateField();\n\n      for (let i = 0; i < fieldSize; i++) {\n        const newRow = moveRowOrColumn(field[i]);\n\n        if (!moved && !arraysEqual(newRow, field[i])) {\n          moved = true;\n        }\n        field[i] = newRow;\n      }\n      rotateField();\n      break;\n\n    case 'left':\n      for (let i = 0; i < fieldSize; i++) {\n        const newRow = moveRowOrColumn(field[i]);\n\n        if (!moved && !arraysEqual(newRow, field[i])) {\n          moved = true;\n        }\n        field[i] = newRow;\n      }\n      break;\n\n    case 'right':\n      rotateField();\n      rotateField();\n\n      for (let i = 0; i < fieldSize; i++) {\n        const newRow = moveRowOrColumn(field[i]);\n\n        if (!moved && !arraysEqual(newRow, field[i])) {\n          moved = true;\n        }\n        field[i] = newRow;\n      }\n      rotateField();\n      rotateField();\n      break;\n  }\n\n  if (moved) {\n    updateField();\n    gameScore.textContent = score;\n    generateCell();\n\n    if (field.flat().includes(winValue)) {\n      gameMessageWin.classList.remove('hidden');\n    }\n\n    if (!canMove()) {\n      gameMessageLose.classList.remove('hidden');\n    }\n  }\n}\n\n// Перевірка можливості подальших ходів.\nfunction canMove() {\n  for (let i = 0; i < fieldSize; i++) {\n    for (let j = 0; j < fieldSize; j++) {\n      if (field[i][j] === 0) {\n        return true;\n      }\n\n      if (j < fieldSize - 1 && field[i][j] === field[i][j + 1]) {\n        return true;\n      }\n\n      if (i < fieldSize - 1 && field[i][j] === field[i + 1][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n// Функція для порівняння двох масивів.\nfunction arraysEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// Обробка натискання клавіш для руху клітинок.\ndocument.addEventListener('keydown', eventButton => {\n  eventButton.preventDefault();\n\n  if (gameMessageStart.classList.contains('hidden')) {\n    switch (eventButton.key) {\n      case 'ArrowUp':\n        moveCells('up');\n        break;\n      case 'ArrowDown':\n        moveCells('down');\n        break;\n      case 'ArrowLeft':\n        moveCells('left');\n        break;\n      case 'ArrowRight':\n        moveCells('right');\n        break;\n    }\n  }\n});\n\n// Обробка натискання кнопки \"Start/Restart\".\nbutton.addEventListener('click', function() {\n  initializeGame();\n  button.classList.remove('start');\n  button.classList.add('restart');\n  button.textContent = 'Restart';\n  gameMessageStart.classList.add('hidden');\n  generateCell();\n  generateCell();\n});\n\n// Ініціалізуємо гру при завантаженні сторінки.\ninitializeGame();\n"]}